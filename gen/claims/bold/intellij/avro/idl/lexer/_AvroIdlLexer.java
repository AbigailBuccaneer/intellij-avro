/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package claims.bold.intellij.avro.idl.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static claims.bold.intellij.avro.idl.psi.AvroIdlTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_AvroIdlLexer.flex</tt>
 */
public class _AvroIdlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15472 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\3\21\1\25\1\54\1\55\5\21\2\25\1\56\31\21\1\25"+
    "\1\57\1\21\1\60\40\21\1\61\17\21\1\62\1\63\1\64\1\65\13\21\1\66\10\21\123"+
    "\25\1\67\7\25\1\70\1\71\37\21\1\25\1\71\u0582\21\1\72\u017f\21");

  /* The ZZ_CMAP_Y table has 3776 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\22\2\10\1\23\3\10\1\23\71\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\2\26\16\0\1\31\1\32\1\33\1\34\2\10\1\35\11\10\1\36\21\10\1\37\1\40\23"+
    "\10\1\26\1\41\3\10\1\23\1\42\1\41\4\10\1\43\1\44\4\0\1\45\1\46\1\26\3\10\2"+
    "\47\1\26\1\50\1\51\1\0\1\52\5\10\1\53\2\0\1\54\1\55\1\56\13\10\1\57\1\45\1"+
    "\60\1\61\1\54\1\62\1\26\1\63\1\64\3\10\3\0\1\65\12\10\1\66\1\0\1\67\1\26\1"+
    "\54\1\70\3\10\1\53\1\71\1\22\2\10\1\66\1\72\1\73\1\74\2\26\3\10\1\75\10\26"+
    "\1\76\1\27\6\26\1\77\2\0\1\100\1\101\6\10\1\102\2\0\1\103\1\10\1\104\1\54"+
    "\2\41\1\105\1\106\1\107\2\10\1\76\1\110\1\111\1\112\1\113\1\63\1\114\1\104"+
    "\1\54\1\115\1\51\1\105\1\116\1\107\2\10\1\76\1\117\1\120\1\121\1\122\1\123"+
    "\1\124\1\125\1\54\1\126\1\26\1\105\1\36\1\35\2\10\1\76\1\127\1\111\1\45\1"+
    "\130\1\131\1\26\1\104\1\54\1\42\1\26\1\105\1\106\1\107\2\10\1\76\1\127\1\111"+
    "\1\112\1\122\1\132\1\114\1\104\1\54\1\42\1\26\1\133\1\134\1\135\1\136\1\137"+
    "\1\134\1\10\1\140\1\141\1\142\1\143\1\26\1\125\1\54\1\26\1\42\1\105\1\31\1"+
    "\76\2\10\1\76\1\144\1\145\1\146\1\142\1\147\1\25\1\104\1\54\2\26\1\150\1\31"+
    "\1\76\2\10\1\76\1\144\1\111\1\146\1\142\1\147\1\33\1\104\1\54\1\151\1\26\1"+
    "\150\1\31\1\76\4\10\1\152\1\146\1\153\1\63\1\26\1\104\1\54\1\26\1\40\1\150"+
    "\1\10\1\23\1\40\2\10\1\35\1\154\1\23\1\155\1\156\1\0\1\157\1\160\1\161\1\26"+
    "\1\41\5\10\1\162\1\163\1\164\1\100\1\54\1\165\4\26\1\166\1\167\1\170\1\41"+
    "\1\171\1\172\1\162\1\173\1\174\1\175\1\54\1\176\4\26\1\131\2\26\1\177\1\54"+
    "\1\165\1\200\1\201\1\10\1\41\3\10\1\27\1\44\1\0\1\146\1\202\1\0\1\44\3\0\1"+
    "\50\1\203\7\26\5\10\1\53\1\0\1\204\1\54\1\165\1\66\1\205\1\206\1\207\1\210"+
    "\1\10\1\211\1\212\1\54\1\213\4\10\1\36\1\21\5\10\1\214\51\10\1\135\1\23\1"+
    "\135\5\10\1\135\4\10\1\135\1\23\1\135\1\10\1\23\7\10\1\135\10\10\1\215\4\26"+
    "\2\10\2\26\12\10\1\27\1\26\1\41\114\10\1\106\2\10\1\216\2\10\1\47\11\10\1"+
    "\134\1\131\1\26\1\10\1\31\1\217\1\26\2\10\1\217\1\26\2\10\1\220\1\26\1\10"+
    "\1\31\1\221\1\26\6\10\1\222\3\0\1\223\1\224\1\54\1\165\3\26\1\225\1\54\1\165"+
    "\13\10\1\26\5\10\1\226\10\10\1\227\1\26\3\10\1\27\1\0\1\2\1\0\1\2\1\125\1"+
    "\54\3\10\1\227\1\27\1\26\5\10\1\115\2\0\1\56\1\177\1\54\1\165\4\26\2\10\1"+
    "\164\1\2\6\10\1\202\1\100\3\0\1\112\1\54\1\165\1\54\1\165\1\43\13\26\1\230"+
    "\5\10\1\222\1\0\1\230\1\115\1\54\1\165\1\26\1\231\1\2\1\26\1\232\3\10\1\103"+
    "\1\207\1\54\1\70\4\10\1\66\1\0\1\2\1\26\4\10\1\222\2\0\1\26\1\54\1\233\1\54"+
    "\1\70\3\10\1\227\12\26\1\234\2\0\1\235\1\236\1\26\30\10\4\0\1\100\2\26\1\77"+
    "\42\10\2\227\4\10\2\227\1\10\1\237\3\10\1\227\6\10\1\31\1\174\1\240\1\27\1"+
    "\241\1\115\1\10\1\27\1\240\1\27\1\242\1\243\3\26\1\244\1\26\1\43\1\131\1\26"+
    "\1\245\1\246\1\50\1\247\1\42\1\43\2\26\1\10\1\27\3\10\1\47\2\26\1\0\1\50\1"+
    "\250\1\0\1\251\1\26\1\252\1\40\1\154\1\253\1\30\1\254\1\10\1\255\1\256\1\257"+
    "\2\26\5\10\1\131\116\26\5\10\1\23\5\10\1\23\20\10\1\27\1\260\1\261\1\26\4"+
    "\10\1\36\1\21\7\10\1\43\1\26\1\63\2\10\1\23\1\26\10\23\4\0\5\26\1\43\72\26"+
    "\1\262\3\26\1\41\1\211\1\253\1\27\1\41\11\10\1\23\1\263\1\41\12\10\1\214\1"+
    "\256\4\10\1\227\1\41\12\10\1\23\2\26\3\10\1\47\6\26\170\10\1\227\11\26\71"+
    "\10\1\27\6\26\21\10\1\27\10\26\5\10\1\227\41\10\1\27\2\10\1\54\1\264\2\26"+
    "\5\10\1\164\1\77\1\265\3\10\1\63\12\10\1\177\3\26\1\43\1\10\1\40\14\10\1\266"+
    "\1\115\1\26\1\10\1\47\11\26\1\10\1\267\1\270\2\10\1\53\2\26\1\131\6\10\1\115"+
    "\1\26\1\271\5\10\1\222\1\0\1\50\1\26\1\54\1\165\2\0\1\271\1\51\1\54\1\70\2"+
    "\10\1\66\1\175\2\10\1\164\1\0\1\2\1\26\3\10\1\27\1\101\5\10\1\53\1\0\1\251"+
    "\1\43\1\54\1\165\2\26\1\160\1\272\5\10\1\103\1\100\1\26\1\270\1\273\1\54\1"+
    "\165\2\10\1\23\1\274\6\10\1\206\1\275\1\226\2\26\1\276\1\10\1\53\1\277\1\26"+
    "\3\300\1\26\2\23\22\26\4\10\1\53\1\301\1\54\1\165\64\10\1\115\1\26\2\10\1"+
    "\23\1\302\5\10\1\115\40\26\55\10\1\227\15\10\1\25\4\26\1\23\1\26\1\302\1\303"+
    "\1\10\1\76\1\23\1\174\1\304\15\10\1\25\3\26\1\302\54\10\1\227\2\26\10\10\1"+
    "\40\6\10\5\26\1\10\1\27\2\0\2\26\1\100\1\26\1\137\2\26\1\256\3\26\1\42\1\31"+
    "\20\10\1\305\1\245\1\26\1\54\1\165\1\41\2\10\1\116\1\41\2\10\1\47\1\306\12"+
    "\10\1\23\3\40\1\307\1\310\2\26\1\311\1\10\1\144\2\10\1\23\2\10\1\312\1\10"+
    "\1\227\1\10\1\227\4\26\17\10\1\47\10\26\6\10\1\27\20\26\1\313\20\26\3\10\1"+
    "\27\6\10\1\131\5\26\3\10\1\23\2\26\3\10\1\47\6\26\3\10\1\227\4\10\1\115\1"+
    "\10\1\253\5\26\23\10\1\227\1\54\1\165\52\26\1\227\1\76\4\10\1\36\1\314\2\10"+
    "\1\227\25\26\2\10\1\227\1\26\3\10\1\25\10\26\7\10\1\306\10\26\1\315\1\77\1"+
    "\144\1\41\2\10\1\115\1\121\4\26\3\10\1\27\20\26\6\10\1\227\1\26\2\10\1\227"+
    "\1\26\2\10\1\47\21\26\11\10\1\131\66\26\1\232\6\10\1\0\1\100\3\26\1\125\1"+
    "\54\2\26\1\232\5\10\1\0\1\316\2\26\3\10\1\131\1\54\1\165\1\232\3\10\1\164"+
    "\1\0\1\317\1\54\10\26\1\232\5\10\1\53\1\0\1\320\1\26\1\54\1\165\42\26\1\160"+
    "\1\272\72\26\1\160\1\272\56\26\1\160\1\272\4\26\5\10\1\53\1\0\1\26\1\54\1"+
    "\165\14\26\1\160\1\272\64\26\1\160\1\272\42\26\55\10\1\23\22\26\14\10\1\47"+
    "\63\26\5\10\1\23\72\26\7\10\1\131\4\26\1\160\1\272\34\26\1\160\1\272\64\26"+
    "\10\10\1\27\1\26\1\103\4\0\1\100\1\26\1\63\1\232\1\10\14\26\1\25\153\26\1"+
    "\321\1\322\2\0\1\323\1\2\3\26\1\324\22\26\1\325\67\26\12\10\1\31\10\10\1\31"+
    "\1\326\1\327\1\10\1\330\1\144\7\10\1\36\1\331\2\31\3\10\1\332\1\174\1\40\1"+
    "\76\51\10\1\227\3\10\1\76\2\10\1\214\3\10\1\214\2\10\1\31\3\10\1\31\2\10\1"+
    "\23\3\10\1\23\3\10\1\76\3\10\1\76\2\10\1\214\1\333\6\54\1\144\3\10\1\166\1"+
    "\41\1\214\1\334\1\252\1\335\1\166\1\237\1\166\2\214\1\124\1\10\1\35\1\10\1"+
    "\115\1\336\1\35\1\10\1\115\50\26\32\10\1\23\5\26\106\10\1\27\1\26\33\10\1"+
    "\227\74\26\1\123\3\26\14\0\20\26\36\0\2\26");

  /* The ZZ_CMAP_A table has 1784 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\10\1\2\4\1\6\10\4\0\1\2\1\0\1\11\1\0\1\7\3\0\1\25\1\26\1\5\1\22\1\34\1"+
    "\13\1\20\1\3\1\14\11\15\1\36\1\35\1\31\1\37\1\32\1\0\1\33\4\7\1\21\15\7\1"+
    "\27\1\12\1\30\1\0\1\7\1\6\1\54\1\64\1\44\1\50\1\53\1\57\1\63\1\52\1\46\2\7"+
    "\1\45\1\47\1\55\1\42\1\40\1\7\1\41\1\51\1\43\1\56\1\7\1\61\1\60\1\62\1\7\1"+
    "\23\1\0\1\24\1\0\6\10\1\4\2\10\1\2\1\0\4\7\4\0\1\7\2\0\1\10\7\0\1\7\4\0\1"+
    "\7\5\0\7\7\1\0\2\7\4\0\4\7\16\0\5\7\7\0\1\7\1\0\1\7\1\0\5\7\1\0\2\7\2\0\4"+
    "\7\10\0\1\7\1\0\3\7\1\0\1\7\1\0\4\7\1\0\13\7\1\0\3\7\1\0\5\10\2\0\6\7\1\0"+
    "\7\7\1\0\1\7\15\0\1\7\1\0\15\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\1\10\3\7\5"+
    "\0\5\10\6\0\1\7\4\0\3\10\5\0\3\7\5\10\12\17\4\0\2\7\1\10\13\7\1\0\1\7\7\10"+
    "\2\7\2\10\1\0\4\10\2\7\2\17\3\7\2\0\1\7\7\0\1\10\1\7\1\10\6\7\3\10\2\0\11"+
    "\7\3\10\1\7\6\0\2\17\6\7\4\10\2\7\2\0\2\10\1\7\11\10\1\7\3\10\1\7\5\10\2\0"+
    "\1\7\3\10\4\0\1\7\1\0\6\7\4\0\13\10\1\0\4\10\6\7\3\10\1\7\2\10\1\7\7\10\2"+
    "\7\2\10\2\0\2\17\1\0\3\10\1\0\10\7\2\0\2\7\2\0\6\7\1\0\1\7\3\0\4\7\2\0\1\10"+
    "\1\7\7\10\2\0\2\10\2\0\3\10\1\7\5\0\2\7\1\0\5\7\4\0\3\7\4\0\2\7\1\0\2\7\1"+
    "\0\2\7\1\0\2\7\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0\4\7\1\0\1"+
    "\7\7\0\2\17\2\10\3\7\1\10\2\0\1\7\1\0\2\7\1\0\3\7\2\10\1\0\3\10\2\0\1\7\15"+
    "\0\2\10\2\0\1\10\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2"+
    "\7\3\0\2\7\4\0\5\10\3\0\3\10\1\0\4\10\2\0\1\7\6\0\1\10\4\7\1\0\5\7\3\0\1\7"+
    "\7\10\1\0\2\10\5\0\2\10\3\0\2\10\1\0\3\7\1\0\2\7\5\0\3\7\2\0\1\7\3\10\1\0"+
    "\4\10\1\7\1\0\4\7\1\0\1\7\4\0\1\10\4\0\6\10\1\0\1\10\7\0\12\16\2\0\2\10\4"+
    "\0\1\7\1\10\2\7\7\10\4\0\10\7\1\10\2\17\7\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2"+
    "\0\1\7\6\0\4\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\3\7\2\10\1\0\2\10\1\7\2"+
    "\0\5\7\1\0\1\7\1\0\6\10\2\0\2\17\2\0\4\7\2\10\13\0\1\10\1\0\1\10\1\0\1\10"+
    "\4\0\2\10\5\7\3\10\6\0\1\10\1\0\7\10\1\7\2\10\4\7\3\10\1\7\3\10\2\7\7\10\3"+
    "\7\4\10\5\7\14\10\1\7\1\10\2\17\4\10\2\0\3\7\1\0\7\7\2\0\3\10\1\2\11\7\3\10"+
    "\3\0\2\7\2\10\4\0\1\7\1\0\2\10\4\0\4\7\10\10\3\0\1\7\3\0\2\7\1\10\5\0\3\10"+
    "\2\0\1\7\1\10\1\7\5\0\6\7\2\0\5\10\3\7\3\0\10\10\5\7\2\17\3\0\3\7\3\10\1\0"+
    "\5\10\4\7\1\10\4\7\3\10\2\7\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\0\6"+
    "\7\2\0\2\7\13\2\5\10\2\1\5\10\1\2\4\0\1\7\12\0\1\2\2\0\6\10\1\0\1\10\3\0\4"+
    "\10\11\0\1\7\4\0\1\7\1\0\5\7\2\0\1\7\1\0\4\7\1\0\3\7\2\0\4\7\5\0\5\7\4\0\1"+
    "\7\4\0\4\7\3\10\2\7\4\0\1\2\4\0\3\7\1\0\2\10\2\0\3\7\2\17\2\7\4\0\6\10\1\0"+
    "\2\7\2\0\4\7\1\0\2\7\1\10\3\7\1\10\4\7\1\10\4\7\2\10\6\7\2\16\6\0\4\7\2\10"+
    "\4\0\1\7\1\10\4\0\1\10\5\7\2\10\3\0\3\7\4\0\3\7\2\10\2\0\6\7\1\0\3\10\1\0"+
    "\2\10\5\0\5\7\5\0\1\7\1\10\3\7\1\0\2\7\1\0\7\7\2\0\1\10\6\0\2\7\2\0\3\7\3"+
    "\0\2\7\3\0\2\7\2\0\3\10\4\0\3\7\1\0\2\7\1\0\1\7\5\0\1\10\2\0\1\7\3\0\1\7\2"+
    "\0\2\7\3\10\1\0\2\10\1\0\3\10\2\0\1\10\2\0\5\10\1\0\2\17\1\10\4\7\10\0\5\10"+
    "\3\0\6\10\2\0\3\10\2\0\4\10\4\0\3\10\5\0\1\7\2\0\2\7\2\0\4\7\1\0\4\7\1\0\1"+
    "\7\1\0\6\7\2\0\5\7\1\0\4\7\1\0\4\7\2\0\2\17\1\0\1\7\1\0\1\7\5\0\1\7\1\0\1"+
    "\7\1\0\3\7\1\0\3\7\1\0\3\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\2\1\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\17\3\1\22\2\0\1\3"+
    "\1\0\1\23\3\0\27\3\2\0\1\23\1\24\1\0"+
    "\1\24\7\3\1\25\1\26\1\27\15\3\2\0\1\30"+
    "\1\0\3\3\1\31\1\3\1\32\5\3\1\33\1\3"+
    "\1\34\6\3\1\30\1\35\10\3\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\3\1\44\1\3\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\2\3\1\54\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\65\0\u0212"+
    "\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba"+
    "\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562"+
    "\0\324\0\65\0\u013e\0\65\0\u0597\0\u05cc\0\u0601\0\u0636"+
    "\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u013e\0\u0b63\0\u0b98\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u0d0b\0\u0109\0\u0109\0\u0109\0\u0d40\0\u0d75"+
    "\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d"+
    "\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u1026\0\u105b\0\u1090"+
    "\0\u10c5\0\u10fa\0\u0109\0\u112f\0\u0109\0\u1164\0\u1199\0\u11ce"+
    "\0\u1203\0\u1238\0\u0109\0\u126d\0\u0109\0\u12a2\0\u12d7\0\u130c"+
    "\0\u1341\0\u1376\0\u13ab\0\65\0\65\0\u13e0\0\u1415\0\u144a"+
    "\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u0109\0\u0109\0\u0109"+
    "\0\u0109\0\u0109\0\u0109\0\u1588\0\u0109\0\u15bd\0\u0109\0\u0109"+
    "\0\u0109\0\u0109\0\u0109\0\u0109\0\u0109\0\u15f2\0\u1627\0\u0109"+
    "\0\u0109";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\2\1\5\1\6\1\2"+
    "\1\7\1\2\1\10\1\11\1\12\3\2\1\6\1\2"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\6\1\34\1\35\1\36\1\37\1\40\1\6"+
    "\1\41\1\42\1\43\1\44\1\45\4\6\1\46\66\0"+
    "\2\3\1\0\1\3\63\0\1\47\1\0\1\50\57\0"+
    "\6\51\1\52\56\51\4\0\1\6\2\0\2\6\2\0"+
    "\3\6\1\0\3\6\16\0\25\6\11\53\1\54\1\55"+
    "\52\53\14\0\1\11\1\12\67\0\1\56\1\57\31\0"+
    "\1\57\25\0\4\12\1\56\1\57\31\0\1\57\15\0"+
    "\1\6\2\0\2\6\2\0\3\6\1\0\3\6\16\0"+
    "\1\6\1\60\23\6\4\0\1\6\2\0\2\6\2\0"+
    "\3\6\1\0\3\6\16\0\13\6\1\61\11\6\4\0"+
    "\1\6\2\0\2\6\2\0\3\6\1\0\3\6\16\0"+
    "\15\6\1\62\7\6\4\0\1\6\2\0\2\6\2\0"+
    "\3\6\1\0\3\6\16\0\1\6\1\63\10\6\1\64"+
    "\12\6\4\0\1\6\2\0\2\6\2\0\3\6\1\0"+
    "\3\6\16\0\2\6\1\65\22\6\4\0\1\6\2\0"+
    "\2\6\2\0\3\6\1\0\3\6\16\0\7\6\1\66"+
    "\1\67\4\6\1\70\7\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\14\6\1\71\10\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\2\6\1\72\22\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\3\6\1\73\1\74"+
    "\20\6\4\0\1\6\2\0\2\6\2\0\3\6\1\0"+
    "\3\6\16\0\1\6\1\75\13\6\1\76\7\6\4\0"+
    "\1\6\2\0\2\6\2\0\3\6\1\0\3\6\16\0"+
    "\1\6\1\77\23\6\4\0\1\6\2\0\2\6\2\0"+
    "\3\6\1\0\3\6\16\0\16\6\1\100\6\6\4\0"+
    "\1\6\2\0\2\6\2\0\3\6\1\0\3\6\16\0"+
    "\15\6\1\101\7\6\4\0\1\6\2\0\2\6\2\0"+
    "\3\6\1\0\3\6\16\0\5\6\1\102\1\103\5\6"+
    "\1\104\10\6\4\0\1\6\2\0\2\6\2\0\3\6"+
    "\1\0\3\6\16\0\2\6\1\105\17\6\1\106\2\6"+
    "\1\47\1\0\2\47\1\0\60\47\5\107\1\110\57\107"+
    "\11\53\1\111\1\55\52\53\14\0\4\112\60\0\1\113"+
    "\4\114\2\0\1\113\46\0\1\6\2\0\2\6\2\0"+
    "\3\6\1\0\3\6\16\0\2\6\1\115\22\6\4\0"+
    "\1\6\2\0\2\6\2\0\3\6\1\0\3\6\16\0"+
    "\4\6\1\116\20\6\4\0\1\6\2\0\2\6\2\0"+
    "\3\6\1\0\3\6\16\0\13\6\1\117\11\6\4\0"+
    "\1\6\2\0\2\6\2\0\3\6\1\0\3\6\16\0"+
    "\16\6\1\120\6\6\4\0\1\6\2\0\2\6\2\0"+
    "\3\6\1\0\3\6\16\0\1\6\1\121\23\6\4\0"+
    "\1\6\2\0\2\6\2\0\3\6\1\0\3\6\16\0"+
    "\15\6\1\122\7\6\4\0\1\6\2\0\2\6\2\0"+
    "\3\6\1\0\3\6\16\0\1\123\24\6\4\0\1\6"+
    "\2\0\2\6\2\0\3\6\1\0\3\6\16\0\5\6"+
    "\1\124\17\6\4\0\1\6\2\0\2\6\2\0\3\6"+
    "\1\0\3\6\16\0\3\6\1\125\21\6\4\0\1\6"+
    "\2\0\2\6\2\0\3\6\1\0\3\6\16\0\1\126"+
    "\24\6\4\0\1\6\2\0\2\6\2\0\3\6\1\0"+
    "\3\6\16\0\16\6\1\127\6\6\4\0\1\6\2\0"+
    "\2\6\2\0\3\6\1\0\3\6\16\0\1\6\1\130"+
    "\23\6\4\0\1\6\2\0\2\6\2\0\3\6\1\0"+
    "\3\6\16\0\12\6\1\131\12\6\4\0\1\6\2\0"+
    "\2\6\2\0\3\6\1\0\3\6\16\0\1\6\1\132"+
    "\23\6\4\0\1\6\2\0\2\6\2\0\3\6\1\0"+
    "\3\6\16\0\16\6\1\133\6\6\4\0\1\6\2\0"+
    "\2\6\2\0\3\6\1\0\3\6\16\0\1\6\1\134"+
    "\23\6\4\0\1\6\2\0\2\6\2\0\3\6\1\0"+
    "\3\6\16\0\5\6\1\135\17\6\4\0\1\6\2\0"+
    "\2\6\2\0\3\6\1\0\3\6\16\0\6\6\1\136"+
    "\16\6\4\0\1\6\2\0\2\6\2\0\3\6\1\0"+
    "\3\6\16\0\2\6\1\137\22\6\4\0\1\6\2\0"+
    "\2\6\2\0\3\6\1\0\3\6\16\0\20\6\1\140"+
    "\4\6\4\0\1\6\2\0\2\6\2\0\3\6\1\0"+
    "\3\6\16\0\5\6\1\141\17\6\4\0\1\6\2\0"+
    "\2\6\2\0\3\6\1\0\3\6\16\0\2\6\1\142"+
    "\22\6\4\0\1\6\2\0\2\6\2\0\3\6\1\0"+
    "\3\6\16\0\3\6\1\143\21\6\5\107\1\144\57\107"+
    "\3\145\1\146\1\145\1\147\57\145\14\0\4\112\1\0"+
    "\1\57\31\0\1\57\25\0\4\114\51\0\1\6\2\0"+
    "\2\6\2\0\3\6\1\0\3\6\16\0\3\6\1\150"+
    "\21\6\4\0\1\6\2\0\2\6\2\0\3\6\1\0"+
    "\3\6\16\0\2\6\1\151\22\6\4\0\1\6\2\0"+
    "\2\6\2\0\3\6\1\0\3\6\16\0\21\6\1\152"+
    "\3\6\4\0\1\6\2\0\2\6\2\0\3\6\1\0"+
    "\3\6\16\0\13\6\1\153\11\6\4\0\1\6\2\0"+
    "\2\6\2\0\3\6\1\0\3\6\16\0\2\6\1\154"+
    "\22\6\4\0\1\6\2\0\2\6\2\0\3\6\1\0"+
    "\3\6\16\0\23\6\1\155\1\6\4\0\1\6\2\0"+
    "\2\6\2\0\3\6\1\0\3\6\16\0\2\6\1\156"+
    "\22\6\4\0\1\6\2\0\2\6\2\0\3\6\1\0"+
    "\3\6\16\0\24\6\1\157\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\6\6\1\160\16\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\13\6\1\161\11\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\2\6\1\162\22\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\7\6\1\163\15\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\14\6\1\164\10\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\5\6\1\165\17\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\2\6\1\166\22\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\14\6\1\167\10\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\13\6\1\170\11\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\11\6\1\171\13\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\5\6\1\172\17\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\13\6\1\173\11\6\3\107\1\174\1\107\1\144"+
    "\57\107\5\145\1\147\62\145\1\175\1\145\1\147\57\145"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\2\6\1\176\22\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\1\6\1\177\23\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\14\6\1\200\10\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\21\6\1\201\3\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\1\6\1\202\23\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\5\6\1\203\17\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\15\6\1\204\7\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\7\6\1\205\15\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\1\6\1\206\23\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\22\6\1\207\2\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\15\6\1\210\7\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\3\6\1\211\21\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\10\6\1\212\14\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\13\6\1\213\11\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\13\6\1\214\11\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\11\6\1\215\13\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\4\6\1\216\20\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\10\6\1\217\14\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\22\6\1\220\2\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\11\6\1\221\13\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\3\6\1\222\21\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\13\6\1\223\11\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\23\6\1\224\1\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\14\6\1\225\10\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\14\6\1\226\10\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\2\6\1\227\22\6"+
    "\4\0\1\6\2\0\2\6\2\0\3\6\1\0\3\6"+
    "\16\0\15\6\1\230\7\6\4\0\1\6\2\0\2\6"+
    "\2\0\3\6\1\0\3\6\16\0\5\6\1\231\17\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5724];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\15\11\20\1\2\0\1\11\1\0"+
    "\1\11\3\0\27\1\2\0\2\1\1\0\30\1\2\0"+
    "\1\1\1\0\24\1\2\11\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _AvroIdlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AvroIdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 46: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 47: break;
          case 3: 
            { return IDENTIFIER;
            }
          case 48: break;
          case 4: 
            { return INT_LITERAL;
            }
          case 49: break;
          case 5: 
            { return LEFT_BRACE;
            }
          case 50: break;
          case 6: 
            { return RIGHT_BRACE;
            }
          case 51: break;
          case 7: 
            { return LEFT_PAREN;
            }
          case 52: break;
          case 8: 
            { return RIGHT_PAREN;
            }
          case 53: break;
          case 9: 
            { return LEFT_BRACKET;
            }
          case 54: break;
          case 10: 
            { return RIGHT_BRACKET;
            }
          case 55: break;
          case 11: 
            { return LEFT_ANGLE;
            }
          case 56: break;
          case 12: 
            { return RIGHT_ANGLE;
            }
          case 57: break;
          case 13: 
            { return AT;
            }
          case 58: break;
          case 14: 
            { return COMMA;
            }
          case 59: break;
          case 15: 
            { return SEMICOLON;
            }
          case 60: break;
          case 16: 
            { return COLON;
            }
          case 61: break;
          case 17: 
            { return EQUALS;
            }
          case 62: break;
          case 18: 
            { return LINE_COMMENT;
            }
          case 63: break;
          case 19: 
            { return STRING_LITERAL;
            }
          case 64: break;
          case 20: 
            { return FLOAT_LITERAL;
            }
          case 65: break;
          case 21: 
            { return IDL;
            }
          case 66: break;
          case 22: 
            { return INT;
            }
          case 67: break;
          case 23: 
            { return MAP;
            }
          case 68: break;
          case 24: 
            { return BLOCK_COMMENT;
            }
          case 69: break;
          case 25: 
            { return TRUE;
            }
          case 70: break;
          case 26: 
            { return LONG;
            }
          case 71: break;
          case 27: 
            { return ENUM;
            }
          case 72: break;
          case 28: 
            { return NULL;
            }
          case 73: break;
          case 29: 
            { return DOC_COMMENT;
            }
          case 74: break;
          case 30: 
            { return ERROR;
            }
          case 75: break;
          case 31: 
            { return ARRAY;
            }
          case 76: break;
          case 32: 
            { return UNION;
            }
          case 77: break;
          case 33: 
            { return FLOAT;
            }
          case 78: break;
          case 34: 
            { return FIXED;
            }
          case 79: break;
          case 35: 
            { return FALSE;
            }
          case 80: break;
          case 36: 
            { return BYTES;
            }
          case 81: break;
          case 37: 
            { return RECORD;
            }
          case 82: break;
          case 38: 
            { return ONEWAY;
            }
          case 83: break;
          case 39: 
            { return THROWS;
            }
          case 84: break;
          case 40: 
            { return IMPORT;
            }
          case 85: break;
          case 41: 
            { return DOUBLE;
            }
          case 86: break;
          case 42: 
            { return STRING;
            }
          case 87: break;
          case 43: 
            { return SCHEMA;
            }
          case 88: break;
          case 44: 
            { return BOOLEAN;
            }
          case 89: break;
          case 45: 
            { return PROTOCOL;
            }
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
