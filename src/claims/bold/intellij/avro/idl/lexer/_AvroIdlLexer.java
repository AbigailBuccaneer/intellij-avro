/* The following code was generated by JFlex 1.4.3 on 01/02/16 18:14 */

package claims.bold.intellij.avro.idl.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static claims.bold.intellij.avro.idl.psi.AvroIdlTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 01/02/16 18:14 from the specification file
 * <tt>/home/abigail/code/intellij-avro/src/claims/bold/intellij/avro/idl/lexer/_AvroIdlLexer.flex</tt>
 */
public class _AvroIdlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\1\1\2\1\0\1\1\1\1\16\7\4\0\1\1\1\0"+
    "\1\10\1\0\1\6\3\0\1\23\1\24\1\4\1\20\1\32\1\12"+
    "\1\16\1\3\1\13\11\14\1\34\1\33\1\27\1\35\1\30\1\0"+
    "\1\31\4\6\1\17\25\6\1\25\1\11\1\26\1\0\1\6\1\5"+
    "\1\52\1\62\1\42\1\46\1\51\1\55\1\61\1\50\1\44\2\6"+
    "\1\43\1\45\1\53\1\40\1\36\1\6\1\37\1\47\1\41\1\54"+
    "\1\6\1\57\1\56\1\60\1\6\1\21\1\0\1\22\1\0\41\7"+
    "\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6"+
    "\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6"+
    "\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0"+
    "\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0"+
    "\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6\2\0"+
    "\1\6\7\0\47\6\11\0\55\7\1\0\1\7\1\0\2\7\1\0"+
    "\2\7\1\0\1\7\10\0\33\6\5\0\3\6\15\0\4\7\7\0"+
    "\1\6\4\0\13\7\5\0\53\6\25\7\12\15\4\0\2\6\1\7"+
    "\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7"+
    "\2\6\12\15\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6"+
    "\33\7\2\0\131\6\13\7\1\6\16\0\12\15\41\6\11\7\2\6"+
    "\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6"+
    "\5\7\22\0\31\6\3\7\244\0\4\7\66\6\3\7\1\6\22\7"+
    "\1\6\7\7\12\6\2\7\2\0\12\15\1\0\7\6\1\0\7\6"+
    "\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\15\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0"+
    "\1\7\7\0\4\6\1\0\1\6\7\0\12\15\2\7\3\6\1\7"+
    "\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7"+
    "\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\15\1\0"+
    "\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\15\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0"+
    "\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"+
    "\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0"+
    "\4\7\2\0\1\6\6\0\1\7\16\0\12\15\11\0\1\6\7\0"+
    "\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\1\0\2\6\6\0\2\6\2\7\2\0\12\15\22\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"+
    "\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0"+
    "\1\6\1\0\2\6\2\7\2\0\12\15\1\0\2\6\17\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0"+
    "\12\15\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0"+
    "\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0"+
    "\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7"+
    "\4\0\10\6\10\7\1\0\12\15\47\0\2\6\1\0\1\6\2\0"+
    "\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0"+
    "\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7"+
    "\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0"+
    "\6\7\2\0\12\15\2\0\2\6\42\0\1\6\27\0\2\7\6\0"+
    "\12\15\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6"+
    "\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7"+
    "\11\0\1\7\71\0\53\6\24\7\1\6\12\15\6\0\6\6\4\7"+
    "\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7"+
    "\1\6\1\7\12\15\4\7\2\0\46\6\12\0\53\6\1\0\1\6"+
    "\3\0\u0149\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6"+
    "\2\0\103\6\2\0\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6"+
    "\2\0\21\6\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6"+
    "\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0"+
    "\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6"+
    "\3\0\2\6\1\7\2\0\12\15\41\0\3\7\2\0\12\15\6\0"+
    "\130\6\10\0\51\6\1\7\1\6\5\0\106\6\12\0\35\6\3\0"+
    "\14\7\4\0\14\7\12\0\12\15\36\6\2\0\5\6\13\0\54\6"+
    "\4\0\21\7\7\6\2\7\6\0\12\15\46\0\27\6\5\7\4\0"+
    "\65\6\12\7\1\0\35\7\2\0\1\7\12\15\6\0\12\15\15\0"+
    "\1\6\130\0\5\7\57\6\21\7\7\6\4\0\12\15\21\0\11\7"+
    "\14\0\3\7\36\6\12\7\3\0\2\6\12\15\6\0\46\6\16\7"+
    "\14\0\44\6\24\7\10\0\12\15\3\0\3\6\12\15\44\6\122\0"+
    "\3\7\1\0\25\7\4\6\1\7\4\6\1\7\15\0\300\6\47\7"+
    "\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0"+
    "\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0"+
    "\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0"+
    "\5\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\5\7\5\0"+
    "\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0\32\6\26\0"+
    "\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0"+
    "\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0"+
    "\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0"+
    "\4\6\3\7\16\0\46\6\12\0\66\6\11\0\1\6\17\0\1\7"+
    "\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0"+
    "\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6"+
    "\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6"+
    "\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6"+
    "\112\0\u51cc\6\64\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6"+
    "\12\15\2\6\24\0\57\6\1\7\14\0\2\7\1\0\31\6\10\0"+
    "\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6\1\0\2\6"+
    "\16\0\12\6\120\0\10\6\1\7\3\6\1\7\4\6\1\7\27\6"+
    "\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6\21\7\13\0"+
    "\12\15\6\0\22\7\6\6\3\0\1\6\4\0\12\15\34\6\10\7"+
    "\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7\16\0"+
    "\1\6\12\15\46\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7"+
    "\2\0\12\15\6\0\27\6\3\0\1\6\1\7\4\0\60\6\1\7"+
    "\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0"+
    "\3\6\43\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0"+
    "\7\6\221\0\43\6\10\7\1\0\2\7\2\0\12\15\6\0\u2ba4\6"+
    "\14\0\27\6\4\0\61\6\u2104\0\u012e\6\2\0\76\6\2\0\152\6"+
    "\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6"+
    "\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6"+
    "\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7"+
    "\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6"+
    "\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\15\7\0\32\6"+
    "\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6"+
    "\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\2\1\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\17\3\1\22\2\0\1\3"+
    "\1\0\1\23\3\0\27\3\2\0\1\23\1\24\1\0"+
    "\7\3\1\25\1\26\1\27\15\3\2\0\1\30\1\0"+
    "\1\24\3\3\1\31\1\3\1\32\5\3\1\33\1\3"+
    "\1\34\6\3\1\30\1\35\10\3\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\3\1\44\1\3\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\2\3\1\54\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\63\0\u01fe"+
    "\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e"+
    "\0\314\0\63\0\u0132\0\63\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a"+
    "\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0132\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27"+
    "\0\u0c5a\0\u0c8d\0\377\0\377\0\377\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0f8a\0\u0fbd\0\u0b28\0\u0ff0"+
    "\0\u1023\0\u1056\0\377\0\u1089\0\377\0\u10bc\0\u10ef\0\u1122"+
    "\0\u1155\0\u1188\0\377\0\u11bb\0\377\0\u11ee\0\u1221\0\u1254"+
    "\0\u1287\0\u12ba\0\u12ed\0\63\0\63\0\u1320\0\u1353\0\u1386"+
    "\0\u13b9\0\u13ec\0\u141f\0\u1452\0\u1485\0\377\0\377\0\377"+
    "\0\377\0\377\0\377\0\u14b8\0\377\0\u14eb\0\377\0\377"+
    "\0\377\0\377\0\377\0\377\0\377\0\u151e\0\u1551\0\377"+
    "\0\377";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\6\1\2\1\7"+
    "\1\2\1\10\1\11\1\12\2\2\1\6\1\2\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\6\1\34\1\35\1\36\1\37\1\40\1\6\1\41"+
    "\1\42\1\43\1\44\1\45\4\6\1\46\64\0\2\3"+
    "\63\0\1\47\1\50\56\0\5\51\1\52\55\51\6\0"+
    "\2\6\3\0\5\6\16\0\25\6\10\53\1\54\1\55"+
    "\51\53\13\0\1\11\1\12\64\0\1\56\1\57\31\0"+
    "\1\57\24\0\3\12\1\56\1\57\31\0\1\57\17\0"+
    "\2\6\3\0\5\6\16\0\1\6\1\60\23\6\6\0"+
    "\2\6\3\0\5\6\16\0\13\6\1\61\11\6\6\0"+
    "\2\6\3\0\5\6\16\0\15\6\1\62\7\6\6\0"+
    "\2\6\3\0\5\6\16\0\1\6\1\63\10\6\1\64"+
    "\12\6\6\0\2\6\3\0\5\6\16\0\2\6\1\65"+
    "\22\6\6\0\2\6\3\0\5\6\16\0\7\6\1\66"+
    "\1\67\4\6\1\70\7\6\6\0\2\6\3\0\5\6"+
    "\16\0\14\6\1\71\10\6\6\0\2\6\3\0\5\6"+
    "\16\0\2\6\1\72\22\6\6\0\2\6\3\0\5\6"+
    "\16\0\3\6\1\73\1\74\20\6\6\0\2\6\3\0"+
    "\5\6\16\0\1\6\1\75\13\6\1\76\7\6\6\0"+
    "\2\6\3\0\5\6\16\0\1\6\1\77\23\6\6\0"+
    "\2\6\3\0\5\6\16\0\16\6\1\100\6\6\6\0"+
    "\2\6\3\0\5\6\16\0\15\6\1\101\7\6\6\0"+
    "\2\6\3\0\5\6\16\0\5\6\1\102\1\103\5\6"+
    "\1\104\10\6\6\0\2\6\3\0\5\6\16\0\2\6"+
    "\1\105\17\6\1\106\2\6\2\47\1\0\60\47\4\107"+
    "\1\110\56\107\10\53\1\111\1\55\51\53\13\0\3\112"+
    "\57\0\1\113\5\0\1\113\50\0\2\6\3\0\5\6"+
    "\16\0\2\6\1\114\22\6\6\0\2\6\3\0\5\6"+
    "\16\0\4\6\1\115\20\6\6\0\2\6\3\0\5\6"+
    "\16\0\13\6\1\116\11\6\6\0\2\6\3\0\5\6"+
    "\16\0\16\6\1\117\6\6\6\0\2\6\3\0\5\6"+
    "\16\0\1\6\1\120\23\6\6\0\2\6\3\0\5\6"+
    "\16\0\15\6\1\121\7\6\6\0\2\6\3\0\5\6"+
    "\16\0\1\122\24\6\6\0\2\6\3\0\5\6\16\0"+
    "\5\6\1\123\17\6\6\0\2\6\3\0\5\6\16\0"+
    "\3\6\1\124\21\6\6\0\2\6\3\0\5\6\16\0"+
    "\1\125\24\6\6\0\2\6\3\0\5\6\16\0\16\6"+
    "\1\126\6\6\6\0\2\6\3\0\5\6\16\0\1\6"+
    "\1\127\23\6\6\0\2\6\3\0\5\6\16\0\12\6"+
    "\1\130\12\6\6\0\2\6\3\0\5\6\16\0\1\6"+
    "\1\131\23\6\6\0\2\6\3\0\5\6\16\0\16\6"+
    "\1\132\6\6\6\0\2\6\3\0\5\6\16\0\1\6"+
    "\1\133\23\6\6\0\2\6\3\0\5\6\16\0\5\6"+
    "\1\134\17\6\6\0\2\6\3\0\5\6\16\0\6\6"+
    "\1\135\16\6\6\0\2\6\3\0\5\6\16\0\2\6"+
    "\1\136\22\6\6\0\2\6\3\0\5\6\16\0\20\6"+
    "\1\137\4\6\6\0\2\6\3\0\5\6\16\0\5\6"+
    "\1\140\17\6\6\0\2\6\3\0\5\6\16\0\2\6"+
    "\1\141\22\6\6\0\2\6\3\0\5\6\16\0\3\6"+
    "\1\142\21\6\4\107\1\143\56\107\3\144\1\145\1\146"+
    "\56\144\13\0\3\112\1\0\1\57\31\0\1\57\24\0"+
    "\3\147\53\0\2\6\3\0\5\6\16\0\3\6\1\150"+
    "\21\6\6\0\2\6\3\0\5\6\16\0\2\6\1\151"+
    "\22\6\6\0\2\6\3\0\5\6\16\0\21\6\1\152"+
    "\3\6\6\0\2\6\3\0\5\6\16\0\13\6\1\153"+
    "\11\6\6\0\2\6\3\0\5\6\16\0\2\6\1\154"+
    "\22\6\6\0\2\6\3\0\5\6\16\0\23\6\1\155"+
    "\1\6\6\0\2\6\3\0\5\6\16\0\2\6\1\156"+
    "\22\6\6\0\2\6\3\0\5\6\16\0\24\6\1\157"+
    "\6\0\2\6\3\0\5\6\16\0\6\6\1\160\16\6"+
    "\6\0\2\6\3\0\5\6\16\0\13\6\1\161\11\6"+
    "\6\0\2\6\3\0\5\6\16\0\2\6\1\162\22\6"+
    "\6\0\2\6\3\0\5\6\16\0\7\6\1\163\15\6"+
    "\6\0\2\6\3\0\5\6\16\0\14\6\1\164\10\6"+
    "\6\0\2\6\3\0\5\6\16\0\5\6\1\165\17\6"+
    "\6\0\2\6\3\0\5\6\16\0\2\6\1\166\22\6"+
    "\6\0\2\6\3\0\5\6\16\0\14\6\1\167\10\6"+
    "\6\0\2\6\3\0\5\6\16\0\13\6\1\170\11\6"+
    "\6\0\2\6\3\0\5\6\16\0\11\6\1\171\13\6"+
    "\6\0\2\6\3\0\5\6\16\0\5\6\1\172\17\6"+
    "\6\0\2\6\3\0\5\6\16\0\13\6\1\173\11\6"+
    "\3\107\1\174\1\143\56\107\4\144\1\146\61\144\1\175"+
    "\1\146\56\144\6\0\2\6\3\0\5\6\16\0\2\6"+
    "\1\176\22\6\6\0\2\6\3\0\5\6\16\0\1\6"+
    "\1\177\23\6\6\0\2\6\3\0\5\6\16\0\14\6"+
    "\1\200\10\6\6\0\2\6\3\0\5\6\16\0\21\6"+
    "\1\201\3\6\6\0\2\6\3\0\5\6\16\0\1\6"+
    "\1\202\23\6\6\0\2\6\3\0\5\6\16\0\5\6"+
    "\1\203\17\6\6\0\2\6\3\0\5\6\16\0\15\6"+
    "\1\204\7\6\6\0\2\6\3\0\5\6\16\0\7\6"+
    "\1\205\15\6\6\0\2\6\3\0\5\6\16\0\1\6"+
    "\1\206\23\6\6\0\2\6\3\0\5\6\16\0\22\6"+
    "\1\207\2\6\6\0\2\6\3\0\5\6\16\0\15\6"+
    "\1\210\7\6\6\0\2\6\3\0\5\6\16\0\3\6"+
    "\1\211\21\6\6\0\2\6\3\0\5\6\16\0\10\6"+
    "\1\212\14\6\6\0\2\6\3\0\5\6\16\0\13\6"+
    "\1\213\11\6\6\0\2\6\3\0\5\6\16\0\13\6"+
    "\1\214\11\6\6\0\2\6\3\0\5\6\16\0\11\6"+
    "\1\215\13\6\6\0\2\6\3\0\5\6\16\0\4\6"+
    "\1\216\20\6\6\0\2\6\3\0\5\6\16\0\10\6"+
    "\1\217\14\6\6\0\2\6\3\0\5\6\16\0\22\6"+
    "\1\220\2\6\6\0\2\6\3\0\5\6\16\0\11\6"+
    "\1\221\13\6\6\0\2\6\3\0\5\6\16\0\3\6"+
    "\1\222\21\6\6\0\2\6\3\0\5\6\16\0\13\6"+
    "\1\223\11\6\6\0\2\6\3\0\5\6\16\0\23\6"+
    "\1\224\1\6\6\0\2\6\3\0\5\6\16\0\14\6"+
    "\1\225\10\6\6\0\2\6\3\0\5\6\16\0\14\6"+
    "\1\226\10\6\6\0\2\6\3\0\5\6\16\0\2\6"+
    "\1\227\22\6\6\0\2\6\3\0\5\6\16\0\15\6"+
    "\1\230\7\6\6\0\2\6\3\0\5\6\16\0\5\6"+
    "\1\231\17\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5508];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\15\11\20\1\2\0\1\11\1\0"+
    "\1\11\3\0\27\1\2\0\2\1\1\0\27\1\2\0"+
    "\1\1\1\0\25\1\2\11\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _AvroIdlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AvroIdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { return FIXED;
          }
        case 46: break;
        case 36: 
          { return BYTES;
          }
        case 47: break;
        case 44: 
          { return BOOLEAN;
          }
        case 48: break;
        case 9: 
          { return LEFT_BRACKET;
          }
        case 49: break;
        case 31: 
          { return ARRAY;
          }
        case 50: break;
        case 15: 
          { return SEMICOLON;
          }
        case 51: break;
        case 39: 
          { return THROWS;
          }
        case 52: break;
        case 29: 
          { return DOC_COMMENT;
          }
        case 53: break;
        case 37: 
          { return RECORD;
          }
        case 54: break;
        case 43: 
          { return SCHEMA;
          }
        case 55: break;
        case 21: 
          { return IDL;
          }
        case 56: break;
        case 35: 
          { return FALSE;
          }
        case 57: break;
        case 7: 
          { return LEFT_PAREN;
          }
        case 58: break;
        case 20: 
          { return FLOAT_LITERAL;
          }
        case 59: break;
        case 14: 
          { return COMMA;
          }
        case 60: break;
        case 13: 
          { return AT;
          }
        case 61: break;
        case 45: 
          { return PROTOCOL;
          }
        case 62: break;
        case 41: 
          { return DOUBLE;
          }
        case 63: break;
        case 19: 
          { return STRING_LITERAL;
          }
        case 64: break;
        case 16: 
          { return COLON;
          }
        case 65: break;
        case 17: 
          { return EQUALS;
          }
        case 66: break;
        case 28: 
          { return NULL;
          }
        case 67: break;
        case 24: 
          { return BLOCK_COMMENT;
          }
        case 68: break;
        case 40: 
          { return IMPORT;
          }
        case 69: break;
        case 22: 
          { return INT;
          }
        case 70: break;
        case 5: 
          { return LEFT_BRACE;
          }
        case 71: break;
        case 11: 
          { return LEFT_ANGLE;
          }
        case 72: break;
        case 18: 
          { return LINE_COMMENT;
          }
        case 73: break;
        case 8: 
          { return RIGHT_PAREN;
          }
        case 74: break;
        case 38: 
          { return ONEWAY;
          }
        case 75: break;
        case 27: 
          { return ENUM;
          }
        case 76: break;
        case 33: 
          { return FLOAT;
          }
        case 77: break;
        case 10: 
          { return RIGHT_BRACKET;
          }
        case 78: break;
        case 32: 
          { return UNION;
          }
        case 79: break;
        case 42: 
          { return STRING;
          }
        case 80: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 81: break;
        case 30: 
          { return ERROR;
          }
        case 82: break;
        case 25: 
          { return TRUE;
          }
        case 83: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 84: break;
        case 4: 
          { return INT_LITERAL;
          }
        case 85: break;
        case 26: 
          { return LONG;
          }
        case 86: break;
        case 12: 
          { return RIGHT_ANGLE;
          }
        case 87: break;
        case 6: 
          { return RIGHT_BRACE;
          }
        case 88: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 89: break;
        case 23: 
          { return MAP;
          }
        case 90: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
