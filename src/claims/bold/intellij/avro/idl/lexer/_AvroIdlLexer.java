/* The following code was generated by JFlex 1.4.3 on 1/27/16 10:21 */

package claims.bold.intellij.avro.idl.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static claims.bold.intellij.avro.idl.psi.AvroIdlTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/27/16 10:21 from the specification file
 * <tt>/home/abigail/code/intellij-avro/src/claims/bold/intellij/avro/idl/lexer/_AvroIdlLexer.flex</tt>
 */
public class _AvroIdlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\3\1\0"+
    "\1\16\1\0\1\7\2\0\1\0\1\27\1\30\1\5\1\24\1\36"+
    "\1\17\1\22\1\4\1\20\11\21\1\40\1\37\1\33\1\41\1\34"+
    "\1\0\1\35\4\12\1\23\25\12\1\31\1\14\1\32\1\11\1\12"+
    "\1\6\1\56\1\65\1\46\1\52\1\55\1\60\1\64\1\54\1\50"+
    "\2\7\1\47\1\51\1\57\1\44\1\42\1\7\1\43\1\53\1\45"+
    "\1\15\1\7\1\62\1\61\1\63\1\7\1\25\1\0\1\26\1\0"+
    "\41\10\2\0\4\7\4\0\1\7\2\0\1\10\7\0\1\7\4\0"+
    "\1\7\5\0\27\7\1\0\37\7\1\0\u01ca\7\4\0\14\7\16\0"+
    "\5\7\7\0\1\7\1\0\1\7\21\0\160\10\5\7\1\0\2\7"+
    "\2\0\4\7\10\0\1\7\1\0\3\7\1\0\1\7\1\0\24\7"+
    "\1\0\123\7\1\0\213\7\1\0\5\10\2\0\236\7\11\0\46\7"+
    "\2\0\1\7\7\0\47\7\7\0\1\7\1\0\55\10\1\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\1\10\10\0\33\7\5\0\3\7"+
    "\15\0\5\10\6\0\1\7\4\0\13\10\5\0\53\7\25\10\12\13"+
    "\4\0\2\7\1\10\143\7\1\0\1\7\10\10\1\0\6\10\2\7"+
    "\2\10\1\0\4\10\2\7\12\13\3\7\2\0\1\7\17\0\1\10"+
    "\1\7\1\10\36\7\33\10\2\0\131\7\13\10\1\7\16\0\12\13"+
    "\41\7\11\10\2\7\4\0\1\7\5\0\26\7\4\10\1\7\11\10"+
    "\1\7\3\10\1\7\5\10\22\0\31\7\3\10\104\0\1\7\1\0"+
    "\13\7\67\0\33\10\1\0\4\10\66\7\3\10\1\7\22\10\1\7"+
    "\7\10\12\7\2\10\2\0\12\13\1\0\7\7\1\0\7\7\1\0"+
    "\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0"+
    "\1\7\3\0\4\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0"+
    "\3\10\1\7\10\0\1\10\4\0\2\7\1\0\3\7\2\10\2\0"+
    "\12\13\4\7\7\0\1\7\5\0\3\10\1\0\6\7\4\0\2\7"+
    "\2\0\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7"+
    "\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0\1\10"+
    "\7\0\4\7\1\0\1\7\7\0\12\13\2\10\3\7\1\10\13\0"+
    "\3\10\1\0\11\7\1\0\3\7\1\0\26\7\1\0\7\7\1\0"+
    "\2\7\1\0\5\7\2\0\1\10\1\7\10\10\1\0\3\10\1\0"+
    "\3\10\2\0\1\7\17\0\2\7\2\10\2\0\12\13\1\0\1\7"+
    "\17\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\5\7\2\0\1\10\1\7\7\10\2\0\2\10"+
    "\2\0\3\10\10\0\2\10\4\0\2\7\1\0\3\7\2\10\2\0"+
    "\12\13\1\0\1\7\20\0\1\10\1\7\1\0\6\7\3\0\3\7"+
    "\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\3\0\3\7\3\0\14\7\4\0\5\10\3\0\3\10\1\0\4\10"+
    "\2\0\1\7\6\0\1\10\16\0\12\13\11\0\1\7\7\0\3\10"+
    "\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7"+
    "\3\0\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\1\0"+
    "\2\7\6\0\2\7\2\10\2\0\12\13\22\0\2\10\1\0\10\7"+
    "\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0\1\10"+
    "\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0\1\7"+
    "\1\0\2\7\2\10\2\0\12\13\1\0\2\7\17\0\2\10\1\0"+
    "\10\7\1\0\3\7\1\0\51\7\2\0\1\7\7\10\1\0\3\10"+
    "\1\0\4\10\1\7\10\0\1\10\10\0\2\7\2\10\2\0\12\13"+
    "\12\0\6\7\2\0\2\10\1\0\22\7\3\0\30\7\1\0\11\7"+
    "\1\0\1\7\2\0\7\7\3\0\1\10\4\0\6\10\1\0\1\10"+
    "\1\0\10\10\22\0\2\10\15\0\60\7\1\10\2\7\7\10\4\0"+
    "\10\7\10\10\1\0\12\13\47\0\2\7\1\0\1\7\2\0\2\7"+
    "\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7"+
    "\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\10\2\7"+
    "\6\10\1\0\2\10\1\7\2\0\5\7\1\0\1\7\1\0\6\10"+
    "\2\0\12\13\2\0\4\7\40\0\1\7\27\0\2\10\6\0\12\13"+
    "\13\0\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\7\1\0"+
    "\44\7\4\0\24\10\1\0\2\10\5\7\13\10\1\0\44\10\11\0"+
    "\1\10\71\0\53\7\24\10\1\7\12\13\6\0\6\7\4\10\4\7"+
    "\3\10\1\7\3\10\2\7\7\10\3\7\4\10\15\7\14\10\1\7"+
    "\1\10\12\13\4\10\2\0\46\7\1\0\1\7\5\0\1\7\2\0"+
    "\53\7\1\0\u014d\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0"+
    "\4\7\2\0\51\7\1\0\4\7\2\0\41\7\1\0\4\7\2\0"+
    "\7\7\1\0\1\7\1\0\4\7\2\0\17\7\1\0\71\7\1\0"+
    "\4\7\2\0\103\7\2\0\3\10\40\0\20\7\20\0\125\7\14\0"+
    "\u026c\7\2\0\21\7\1\0\32\7\5\0\113\7\3\0\3\7\17\0"+
    "\15\7\1\0\4\7\3\10\13\0\22\7\3\10\13\0\22\7\2\10"+
    "\14\0\15\7\1\0\3\7\1\0\2\10\14\0\64\7\40\10\3\0"+
    "\1\7\3\0\2\7\1\10\2\0\12\13\41\0\3\10\2\0\12\13"+
    "\6\0\130\7\10\0\51\7\1\10\1\7\5\0\106\7\12\0\35\7"+
    "\3\0\14\10\4\0\14\10\12\0\12\13\36\7\2\0\5\7\13\0"+
    "\54\7\4\0\21\10\7\7\2\10\6\0\12\13\46\0\27\7\5\10"+
    "\4\0\65\7\12\10\1\0\35\10\2\0\1\10\12\13\6\0\12\13"+
    "\15\0\1\7\130\0\5\10\57\7\21\10\7\7\4\0\12\13\21\0"+
    "\11\10\14\0\3\10\36\7\15\10\2\7\12\13\54\7\16\10\14\0"+
    "\44\7\24\10\10\0\12\13\3\0\3\7\12\13\44\7\122\0\3\10"+
    "\1\0\25\10\4\7\1\10\4\7\3\10\2\7\11\0\300\7\47\10"+
    "\25\0\4\10\u0116\7\2\0\6\7\2\0\46\7\2\0\6\7\2\0"+
    "\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0\37\7\2\0"+
    "\65\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0\7\7\3\0"+
    "\4\7\2\0\6\7\4\0\15\7\5\0\3\7\1\0\7\7\16\0"+
    "\5\10\32\0\5\10\20\0\2\7\23\0\1\7\13\0\5\10\5\0"+
    "\6\10\1\0\1\7\15\0\1\7\20\0\15\7\3\0\33\7\25\0"+
    "\15\10\4\0\1\10\3\0\14\10\21\0\1\7\4\0\1\7\2\0"+
    "\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0\5\7\4\0"+
    "\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0\205\7\6\0"+
    "\4\7\3\10\2\7\14\0\46\7\1\0\1\7\5\0\1\7\2\0"+
    "\70\7\7\0\1\7\17\0\1\10\27\7\11\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7"+
    "\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0\2\10\2\0"+
    "\3\7\1\0\132\7\1\0\4\7\5\0\51\7\3\0\136\7\21\0"+
    "\33\7\65\0\20\7\u0200\0\u19b6\7\112\0\u51cd\7\63\0\u048d\7\103\0"+
    "\56\7\2\0\u010d\7\3\0\20\7\12\13\2\7\24\0\57\7\1\10"+
    "\4\0\12\10\1\0\31\7\7\0\1\10\120\7\2\10\45\0\11\7"+
    "\2\0\147\7\2\0\4\7\1\0\4\7\14\0\13\7\115\0\12\7"+
    "\1\10\3\7\1\10\4\7\1\10\27\7\5\10\20\0\1\7\7\0"+
    "\64\7\14\0\2\10\62\7\21\10\13\0\12\13\6\0\22\10\6\7"+
    "\3\0\1\7\4\0\12\13\34\7\10\10\2\0\27\7\15\10\14\0"+
    "\35\7\3\0\4\10\57\7\16\10\16\0\1\7\12\13\46\0\51\7"+
    "\16\10\11\0\3\7\1\10\10\7\2\10\2\0\12\13\6\0\27\7"+
    "\3\0\1\7\1\10\4\0\60\7\1\10\1\7\3\10\2\7\2\10"+
    "\5\7\2\10\1\7\1\10\1\7\30\0\3\7\2\0\13\7\5\10"+
    "\2\0\3\7\2\10\12\0\6\7\2\0\6\7\2\0\6\7\11\0"+
    "\7\7\1\0\7\7\221\0\43\7\10\10\1\0\2\10\2\0\12\13"+
    "\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u016e\7\2\0\152\7"+
    "\46\0\7\7\14\0\5\7\5\0\1\7\1\10\12\7\1\0\15\7"+
    "\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\154\7"+
    "\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7\3\0\20\10"+
    "\20\0\7\10\14\0\2\7\30\0\3\7\31\0\1\7\6\0\5\7"+
    "\1\0\207\7\2\0\1\10\4\0\1\7\13\0\12\13\7\0\32\7"+
    "\4\0\1\7\1\0\32\7\13\0\131\7\3\0\6\7\2\0\6\7"+
    "\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7\22\0\3\10"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\2\3\2\1\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\16\3\1\22\1\23\1\0"+
    "\2\3\2\0\1\24\2\0\26\3\1\23\1\3\1\0"+
    "\1\25\1\0\7\3\1\26\1\27\1\30\14\3\1\23"+
    "\1\3\2\0\1\25\3\3\1\31\1\3\1\32\5\3"+
    "\1\33\1\3\1\34\5\3\1\35\2\0\10\3\1\36"+
    "\1\37\1\40\1\41\1\42\1\3\1\43\1\0\1\3"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\3"+
    "\1\0\1\3\1\53\1\24\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc"+
    "\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c"+
    "\0\330\0\66\0\u05b2\0\u017a\0\u05e8\0\66\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u010e\0\u010e\0\u010e\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\66\0\u103e\0\u1074\0\u10aa\0\u0c06\0\u10e0\0\u1116"+
    "\0\u114c\0\u010e\0\u1182\0\u010e\0\u11b8\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290\0\u010e\0\u12c6\0\u010e\0\u12fc\0\u1332\0\u1368\0\u139e"+
    "\0\u13d4\0\u010e\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518"+
    "\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u010e\0\u010e\0\u010e\0\u010e"+
    "\0\u010e\0\u1626\0\u010e\0\u165c\0\u1692\0\u010e\0\u010e\0\u010e"+
    "\0\u010e\0\u010e\0\u010e\0\u010e\0\u16c8\0\u16fe\0\u1734\0\u010e"+
    "\0\u017a\0\u010e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\2\1\5\1\6\2\2\1\6"+
    "\2\2\1\7\1\10\1\11\1\12\1\13\1\2\1\6"+
    "\1\2\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\6\1\35\1\36\1\37\1\40\1\41"+
    "\1\6\1\42\1\43\1\44\1\45\4\6\1\46\67\0"+
    "\3\3\66\0\1\47\1\50\60\0\6\51\1\52\57\51"+
    "\7\0\2\6\1\0\2\6\1\0\1\6\2\0\4\6"+
    "\16\0\24\6\7\0\2\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\16\0\15\6\1\53\6\6\1\54\2\0"+
    "\11\54\1\55\1\54\1\56\47\54\20\0\1\12\1\13"+
    "\66\0\1\57\1\60\31\0\1\60\23\0\1\13\4\0"+
    "\2\13\1\57\1\60\31\0\1\60\17\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\1\6\1\61"+
    "\22\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\13\6\1\62\10\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\15\6\1\63"+
    "\6\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\1\6\1\64\10\6\1\65\11\6\7\0"+
    "\2\6\1\0\2\6\1\0\1\6\2\0\4\6\16\0"+
    "\2\6\1\66\21\6\7\0\2\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\16\0\7\6\1\67\1\70\4\6"+
    "\1\71\6\6\7\0\2\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\16\0\14\6\1\72\7\6\7\0\2\6"+
    "\1\0\2\6\1\0\1\6\2\0\4\6\16\0\2\6"+
    "\1\73\21\6\7\0\2\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\16\0\3\6\1\74\1\75\17\6\7\0"+
    "\2\6\1\0\2\6\1\0\1\6\2\0\4\6\16\0"+
    "\1\6\1\76\13\6\1\77\6\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\1\6\1\100"+
    "\22\6\7\0\2\6\1\0\2\6\1\0\1\101\2\0"+
    "\4\6\16\0\24\6\7\0\2\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\16\0\5\6\1\102\1\103\5\6"+
    "\1\104\7\6\7\0\2\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\16\0\2\6\1\105\16\6\1\106\2\6"+
    "\2\47\1\0\63\47\5\50\1\107\60\50\7\0\2\6"+
    "\1\0\2\6\1\0\1\6\2\0\4\6\16\0\6\6"+
    "\1\110\15\6\15\54\1\111\50\54\13\0\1\112\4\0"+
    "\2\112\63\0\1\113\4\0\1\113\50\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\2\6\1\114"+
    "\21\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\4\6\1\115\17\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\13\6\1\116"+
    "\10\6\7\0\2\6\1\0\2\6\1\0\1\117\2\0"+
    "\4\6\16\0\24\6\7\0\2\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\16\0\1\6\1\120\22\6\7\0"+
    "\2\6\1\0\2\6\1\0\1\6\2\0\4\6\16\0"+
    "\15\6\1\121\6\6\7\0\2\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\16\0\1\122\23\6\7\0\2\6"+
    "\1\0\2\6\1\0\1\6\2\0\4\6\16\0\5\6"+
    "\1\123\16\6\7\0\2\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\16\0\3\6\1\124\20\6\7\0\2\6"+
    "\1\0\2\6\1\0\1\6\2\0\4\6\16\0\1\125"+
    "\23\6\7\0\2\6\1\0\2\6\1\0\1\126\2\0"+
    "\4\6\16\0\24\6\7\0\2\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\16\0\1\6\1\127\22\6\7\0"+
    "\2\6\1\0\2\6\1\0\1\6\2\0\4\6\16\0"+
    "\12\6\1\130\11\6\7\0\2\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\16\0\1\6\1\131\22\6\7\0"+
    "\2\6\1\0\2\6\1\0\1\132\2\0\4\6\16\0"+
    "\24\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\1\6\1\133\22\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\5\6\1\134"+
    "\16\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\2\6\1\135\21\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\17\6\1\136"+
    "\4\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\5\6\1\137\16\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\2\6\1\140"+
    "\21\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\3\6\1\141\20\6\4\50\1\142\1\107"+
    "\60\50\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\2\6\1\143\21\6\1\54\2\0\3\54"+
    "\1\144\2\54\3\144\1\145\1\54\1\56\1\54\2\144"+
    "\1\54\1\144\5\54\2\144\13\54\1\144\3\54\1\144"+
    "\2\54\2\144\1\54\1\144\4\54\1\144\13\0\1\112"+
    "\4\0\2\112\1\0\1\60\31\0\1\60\23\0\1\146"+
    "\4\0\2\146\53\0\2\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\16\0\3\6\1\147\20\6\7\0\2\6"+
    "\1\0\2\6\1\0\1\6\2\0\4\6\16\0\2\6"+
    "\1\150\21\6\7\0\2\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\16\0\20\6\1\151\3\6\7\0\2\6"+
    "\1\0\2\6\1\0\1\6\2\0\4\6\16\0\13\6"+
    "\1\152\10\6\7\0\2\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\16\0\2\6\1\153\21\6\7\0\2\6"+
    "\1\0\2\6\1\0\1\6\2\0\4\6\16\0\22\6"+
    "\1\154\1\6\7\0\2\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\16\0\2\6\1\155\21\6\7\0\2\6"+
    "\1\0\2\6\1\0\1\6\2\0\4\6\16\0\23\6"+
    "\1\156\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\6\6\1\157\15\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\13\6\1\160"+
    "\10\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\2\6\1\161\21\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\7\6\1\162"+
    "\14\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\14\6\1\163\7\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\5\6\1\164"+
    "\16\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\14\6\1\165\7\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\13\6\1\166"+
    "\10\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\11\6\1\167\12\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\5\6\1\170"+
    "\16\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\13\6\1\171\10\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\15\6\1\172"+
    "\6\6\1\54\2\0\3\54\1\173\2\54\3\173\1\174"+
    "\1\54\1\56\1\54\2\173\1\54\1\173\5\54\2\173"+
    "\13\54\1\173\3\54\1\173\2\54\2\173\1\54\1\173"+
    "\4\54\1\173\6\54\1\173\2\54\4\173\1\111\2\54"+
    "\2\173\1\54\1\173\5\54\2\173\13\54\1\173\3\54"+
    "\1\173\2\54\2\173\1\54\1\173\4\54\1\173\7\0"+
    "\2\6\1\0\2\6\1\0\1\6\2\0\4\6\16\0"+
    "\2\6\1\175\21\6\7\0\2\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\16\0\1\6\1\176\22\6\7\0"+
    "\2\6\1\0\2\6\1\0\1\6\2\0\4\6\16\0"+
    "\14\6\1\177\7\6\7\0\2\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\16\0\20\6\1\200\3\6\7\0"+
    "\2\6\1\0\2\6\1\0\1\6\2\0\4\6\16\0"+
    "\1\6\1\201\22\6\7\0\2\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\16\0\5\6\1\202\16\6\7\0"+
    "\2\6\1\0\2\6\1\0\1\6\2\0\4\6\16\0"+
    "\15\6\1\203\6\6\7\0\2\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\16\0\7\6\1\204\14\6\7\0"+
    "\2\6\1\0\2\6\1\0\1\6\2\0\4\6\16\0"+
    "\1\6\1\205\22\6\7\0\2\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\16\0\21\6\1\206\2\6\7\0"+
    "\2\6\1\0\2\6\1\0\1\6\2\0\4\6\16\0"+
    "\3\6\1\207\20\6\7\0\2\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\16\0\10\6\1\210\13\6\7\0"+
    "\2\6\1\0\2\6\1\0\1\6\2\0\4\6\16\0"+
    "\13\6\1\211\10\6\7\0\2\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\16\0\13\6\1\212\10\6\7\0"+
    "\2\6\1\0\2\6\1\0\1\6\2\0\4\6\16\0"+
    "\11\6\1\213\12\6\1\54\2\0\3\54\1\214\2\54"+
    "\3\214\1\55\1\54\1\56\1\54\2\214\1\54\1\214"+
    "\5\54\2\214\13\54\1\214\3\54\1\214\2\54\2\214"+
    "\1\54\1\214\4\54\1\214\6\54\1\214\2\54\4\214"+
    "\1\111\2\54\2\214\1\54\1\214\5\54\2\214\13\54"+
    "\1\214\3\54\1\214\2\54\2\214\1\54\1\214\4\54"+
    "\1\214\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\4\6\1\215\17\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\10\6\1\216"+
    "\13\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\21\6\1\217\2\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\11\6\1\220"+
    "\12\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\3\6\1\221\20\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\13\6\1\222"+
    "\10\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\22\6\1\223\1\6\7\0\2\6\1\0"+
    "\2\6\1\0\1\6\2\0\4\6\16\0\14\6\1\224"+
    "\7\6\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\14\6\1\225\7\6\1\54\2\0\11\54"+
    "\1\226\1\54\1\56\47\54\7\0\2\6\1\0\2\6"+
    "\1\0\1\6\2\0\4\6\16\0\2\6\1\227\21\6"+
    "\7\0\2\6\1\0\2\6\1\0\1\6\2\0\4\6"+
    "\16\0\15\6\1\230\6\6\14\54\1\226\1\111\1\231"+
    "\47\54\7\0\2\6\1\0\2\6\1\0\1\6\2\0"+
    "\4\6\16\0\5\6\1\232\16\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5994];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\15\11\20\1\1\0\1\11\1\1"+
    "\2\0\1\11\2\0\30\1\1\0\1\1\1\0\26\1"+
    "\1\11\1\1\2\0\25\1\2\0\17\1\1\0\11\1"+
    "\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _AvroIdlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AvroIdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2262) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { return FIXED;
          }
        case 45: break;
        case 35: 
          { return BYTES;
          }
        case 46: break;
        case 43: 
          { return BOOLEAN;
          }
        case 47: break;
        case 9: 
          { return LEFT_BRACKET;
          }
        case 48: break;
        case 31: 
          { return ARRAY;
          }
        case 49: break;
        case 15: 
          { return SEMICOLON;
          }
        case 50: break;
        case 38: 
          { return THROWS;
          }
        case 51: break;
        case 36: 
          { return RECORD;
          }
        case 52: break;
        case 42: 
          { return SCHEMA;
          }
        case 53: break;
        case 22: 
          { return IDL;
          }
        case 54: break;
        case 34: 
          { return FALSE;
          }
        case 55: break;
        case 7: 
          { return LEFT_PAREN;
          }
        case 56: break;
        case 21: 
          { return FLOAT_LITERAL;
          }
        case 57: break;
        case 14: 
          { return COMMA;
          }
        case 58: break;
        case 13: 
          { return AT;
          }
        case 59: break;
        case 44: 
          { return PROTOCOL;
          }
        case 60: break;
        case 40: 
          { return DOUBLE;
          }
        case 61: break;
        case 20: 
          { return STRING_LITERAL;
          }
        case 62: break;
        case 16: 
          { return COLON;
          }
        case 63: break;
        case 17: 
          { return EQUALS;
          }
        case 64: break;
        case 28: 
          { return NULL;
          }
        case 65: break;
        case 19: 
          { return BLOCK_COMMENT;
          }
        case 66: break;
        case 39: 
          { return IMPORT;
          }
        case 67: break;
        case 23: 
          { return INT;
          }
        case 68: break;
        case 5: 
          { return LEFT_BRACE;
          }
        case 69: break;
        case 11: 
          { return LEFT_ANGLE;
          }
        case 70: break;
        case 18: 
          { return LINE_COMMENT;
          }
        case 71: break;
        case 8: 
          { return RIGHT_PAREN;
          }
        case 72: break;
        case 37: 
          { return ONEWAY;
          }
        case 73: break;
        case 27: 
          { return ENUM;
          }
        case 74: break;
        case 32: 
          { return FLOAT;
          }
        case 75: break;
        case 10: 
          { return RIGHT_BRACKET;
          }
        case 76: break;
        case 29: 
          { return UNION;
          }
        case 77: break;
        case 41: 
          { return STRING;
          }
        case 78: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 79: break;
        case 30: 
          { return ERROR;
          }
        case 80: break;
        case 25: 
          { return TRUE;
          }
        case 81: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 82: break;
        case 4: 
          { return INT_LITERAL;
          }
        case 83: break;
        case 26: 
          { return LONG;
          }
        case 84: break;
        case 12: 
          { return RIGHT_ANGLE;
          }
        case 85: break;
        case 6: 
          { return RIGHT_BRACE;
          }
        case 86: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 87: break;
        case 24: 
          { return MAP;
          }
        case 88: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
