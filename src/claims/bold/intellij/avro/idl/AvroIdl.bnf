{
    parserClass = "claims.bold.intellij.avro.idl.parser.AvroIdlParser"
    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "AvroIdl"
    psiImplClassSuffix = "Impl"
    psiPackage = "claims.bold.intellij.avro.idl.psi"
    psiImplPackage = "claims.bold.intellij.avro.idl.psi.impl"

    elementTypeHolderClass = "claims.bold.intellij.avro.idl.psi.AvroIdlTypes"
    elementTypeClass = "claims.bold.intellij.avro.idl.psi.AvroIdlElementType"
    tokenTypeClass = "claims.bold.intellij.avro.idl.psi.AvroIdlTokenType"

    tokens=[
        LEFT_BRACE='{'
        RIGHT_BRACE='}'
        LEFT_PAREN='('
        RIGHT_PAREN=')'
        LEFT_BRACKET='['
        RIGHT_BRACKET=']'
        LEFT_ANGLE='<'
        RIGHT_ANGLE='>'
        AT='@'
        COMMA=','
        SEMICOLON=';'
        EQUALS='='

        PROTOCOL='protocol'
        NAMESPACE='namespace'
        ORDER='order'
        ALIASES='aliases'
        IMPORT='import'
        IDL='idl'
        SCHEMA='schema'
        RECORD='record'
        ERROR='error'
        ENUM='enum'
        FIXED='fixed'
        THROWS='throws'
        ONEWAY='oneway'
        INT='int'
        LONG='long'
        STRING='string'
        BOOLEAN='boolean'
        FLOAT='float'
        DOUBLE='double'
        NULL='null'
        BYTES='bytes'
        ARRAY='array'
        MAP='map'
        UNION='union'
        TRUE='true'
        FALSE='false'

        LINE_COMMENT="regexp://.*"
        BLOCK_COMMENT="regexp:/\*(.|\n)*\*/"
        IDENTIFIER="regexp:(`[^`]*`)|[:jletter:][[:jletterdigit:]\.]*"
        STRING_LITERAL="regexp:\"([^\"\\]|\\.)\""
        INT_LITERAL="regexp:-?(0|[1-9][:digit:]+)"
        FLOAT_LITERAL="regexp:{INT_LITERAL}(\.[:digit:]+)?([eE][+-][:digit:]+)?"
    ]

    generateTokens=true

    extends(".*_decl") = declaration
    extends(".*_type") = type

}

file ::= protocol_def*

protocol_def ::= annotation? 'protocol' IDENTIFIER '{' declaration* '}' { pin = 2 }

annotation ::= '@' annotation_name '(' annotation_body ')' { pin = 1 }
private annotation_name ::= 'namespace' | 'order' | 'aliases'
private annotation_body ::= STRING_LITERAL | annotation_array
private annotation_array ::= '[' [STRING_LITERAL (',' STRING_LITERAL)*] ']' { pin = 1 }

declaration ::= import_decl | record_decl | enum_decl | fixed_decl | message_decl

import_decl ::= annotation? 'import' import_type STRING_LITERAL ';' { pin = 2 }
import_type ::= 'idl' | 'protocol' | 'schema'
record_decl ::= annotation? record_type IDENTIFIER '{' (declarator ';')* '}' { pin = 2 }
record_type ::= 'record' | 'error'

enum_decl ::= annotation? 'enum' IDENTIFIER '{' enum_contents '}' { pin = 2 }
private enum_contents ::= [ IDENTIFIER (',' IDENTIFIER)* ]

fixed_decl ::= annotation? 'fixed' IDENTIFIER '(' expression ')' ';' { pin = 2 }

message_decl ::= annotation? type IDENTIFIER '(' arguments ')' message_attributes* ';' { pin = 4 }
private message_attributes ::= 'throws' IDENTIFIER | 'oneway' { pin = 1}
private arguments ::= [ declarator (',' declarator)* ]

declarator ::= type annotation? IDENTIFIER [ '=' expression ] { pin = 1 }

type ::= array_type | map_type | union_type | primitive_type
primitive_type ::= annotation? ('int' | 'long' | 'string' | 'boolean' | 'float' | 'double' | 'null' | 'bytes' | IDENTIFIER)
private angle_type ::= '<' type '>' { pin = 1 }
array_type ::= annotation? 'array' angle_type { pin = 2 }
map_type ::= annotation? 'map' angle_type { pin = 2 }
union_type ::= annotation? 'union' '{' union_contents '}' { pin = 2 }
private union_contents ::= [ type (',' type)* ]

// TODO 
expression ::= STRING_LITERAL | INT_LITERAL | FLOAT_LITERAL | 'true' | 'false' | 'null'