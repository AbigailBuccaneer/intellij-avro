/* The following code was generated by JFlex 1.4.3 on 06/10/15 15:28 */

package claims.bold.intellij.avro.idl;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static claims.bold.intellij.avro.idl.psi.AvroIdlTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06/10/15 15:28 from the specification file
 * <tt>/home/abigail/code/intellij-avro/src/claims/bold/intellij/avro/idl/_AvroIdlLexer.flex</tt>
 */
public class _AvroIdlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\3\1\0"+
    "\1\16\1\0\1\7\2\0\1\0\1\27\1\30\1\5\1\24\1\36"+
    "\1\17\1\22\1\4\1\20\11\21\1\0\1\37\1\33\1\40\1\34"+
    "\1\0\1\35\4\12\1\23\25\12\1\31\1\14\1\32\1\11\1\12"+
    "\1\6\4\12\1\23\1\12\16\7\1\15\5\7\1\25\1\0\1\26"+
    "\1\0\41\10\2\0\4\7\4\0\1\7\2\0\1\10\7\0\1\7"+
    "\4\0\1\7\5\0\27\7\1\0\37\7\1\0\u01ca\7\4\0\14\7"+
    "\16\0\5\7\7\0\1\7\1\0\1\7\21\0\160\10\5\7\1\0"+
    "\2\7\2\0\4\7\10\0\1\7\1\0\3\7\1\0\1\7\1\0"+
    "\24\7\1\0\123\7\1\0\213\7\1\0\5\10\2\0\236\7\11\0"+
    "\46\7\2\0\1\7\7\0\47\7\11\0\55\10\1\0\1\10\1\0"+
    "\2\10\1\0\2\10\1\0\1\10\10\0\33\7\5\0\3\7\15\0"+
    "\4\10\7\0\1\7\4\0\13\10\5\0\53\7\25\10\12\13\4\0"+
    "\2\7\1\10\143\7\1\0\1\7\10\10\1\0\6\10\2\7\2\10"+
    "\1\0\4\10\2\7\12\13\3\7\2\0\1\7\17\0\1\10\1\7"+
    "\1\10\36\7\33\10\2\0\131\7\13\10\1\7\16\0\12\13\41\7"+
    "\11\10\2\7\4\0\1\7\5\0\26\7\4\10\1\7\11\10\1\7"+
    "\3\10\1\7\5\10\22\0\31\7\3\10\244\0\4\10\66\7\3\10"+
    "\1\7\22\10\1\7\7\10\12\7\2\10\2\0\12\13\1\0\7\7"+
    "\1\0\7\7\1\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7"+
    "\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\10\1\7\7\10"+
    "\2\0\2\10\2\0\3\10\1\7\10\0\1\10\4\0\2\7\1\0"+
    "\3\7\2\10\2\0\12\13\4\7\7\0\1\7\5\0\3\10\1\0"+
    "\6\7\4\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0"+
    "\2\7\1\0\2\7\2\0\1\10\1\0\5\10\4\0\2\10\2\0"+
    "\3\10\3\0\1\10\7\0\4\7\1\0\1\7\7\0\12\13\2\10"+
    "\3\7\1\10\13\0\3\10\1\0\11\7\1\0\3\7\1\0\26\7"+
    "\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7\10\10"+
    "\1\0\3\10\1\0\3\10\2\0\1\7\17\0\2\7\2\10\2\0"+
    "\12\13\1\0\1\7\17\0\3\10\1\0\10\7\2\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7"+
    "\7\10\2\0\2\10\2\0\3\10\10\0\2\10\4\0\2\7\1\0"+
    "\3\7\2\10\2\0\12\13\1\0\1\7\20\0\1\10\1\7\1\0"+
    "\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0"+
    "\2\7\3\0\2\7\3\0\3\7\3\0\14\7\4\0\5\10\3\0"+
    "\3\10\1\0\4\10\2\0\1\7\6\0\1\10\16\0\12\13\11\0"+
    "\1\7\7\0\3\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0"+
    "\12\7\1\0\5\7\3\0\1\7\7\10\1\0\3\10\1\0\4\10"+
    "\7\0\2\10\1\0\2\7\6\0\2\7\2\10\2\0\12\13\22\0"+
    "\2\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0"+
    "\5\7\2\0\1\10\1\7\7\10\1\0\3\10\1\0\4\10\7\0"+
    "\2\10\7\0\1\7\1\0\2\7\2\10\2\0\12\13\1\0\2\7"+
    "\17\0\2\10\1\0\10\7\1\0\3\7\1\0\51\7\2\0\1\7"+
    "\7\10\1\0\3\10\1\0\4\10\1\7\10\0\1\10\10\0\2\7"+
    "\2\10\2\0\12\13\12\0\6\7\2\0\2\10\1\0\22\7\3\0"+
    "\30\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0\1\10\4\0"+
    "\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0\60\7\1\10"+
    "\2\7\7\10\4\0\10\7\10\10\1\0\12\13\47\0\2\7\1\0"+
    "\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0"+
    "\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0"+
    "\4\7\1\10\2\7\6\10\1\0\2\10\1\7\2\0\5\7\1\0"+
    "\1\7\1\0\6\10\2\0\12\13\2\0\2\7\42\0\1\7\27\0"+
    "\2\10\6\0\12\13\13\0\1\10\1\0\1\10\1\0\1\10\4\0"+
    "\2\10\10\7\1\0\44\7\4\0\24\10\1\0\2\10\5\7\13\10"+
    "\1\0\44\10\11\0\1\10\71\0\53\7\24\10\1\7\12\13\6\0"+
    "\6\7\4\10\4\7\3\10\1\7\3\10\2\7\7\10\3\7\4\10"+
    "\15\7\14\10\1\7\1\10\12\13\4\10\2\0\46\7\12\0\53\7"+
    "\1\0\1\7\3\0\u0149\7\1\0\4\7\2\0\7\7\1\0\1\7"+
    "\1\0\4\7\2\0\51\7\1\0\4\7\2\0\41\7\1\0\4\7"+
    "\2\0\7\7\1\0\1\7\1\0\4\7\2\0\17\7\1\0\71\7"+
    "\1\0\4\7\2\0\103\7\2\0\3\10\40\0\20\7\20\0\125\7"+
    "\14\0\u026c\7\2\0\21\7\1\0\32\7\5\0\113\7\3\0\3\7"+
    "\17\0\15\7\1\0\4\7\3\10\13\0\22\7\3\10\13\0\22\7"+
    "\2\10\14\0\15\7\1\0\3\7\1\0\2\10\14\0\64\7\40\10"+
    "\3\0\1\7\3\0\2\7\1\10\2\0\12\13\41\0\3\10\2\0"+
    "\12\13\6\0\130\7\10\0\51\7\1\10\1\7\5\0\106\7\12\0"+
    "\35\7\3\0\14\10\4\0\14\10\12\0\12\13\36\7\2\0\5\7"+
    "\13\0\54\7\4\0\21\10\7\7\2\10\6\0\12\13\46\0\27\7"+
    "\5\10\4\0\65\7\12\10\1\0\35\10\2\0\1\10\12\13\6\0"+
    "\12\13\15\0\1\7\130\0\5\10\57\7\21\10\7\7\4\0\12\13"+
    "\21\0\11\10\14\0\3\10\36\7\12\10\3\0\2\7\12\13\6\0"+
    "\46\7\16\10\14\0\44\7\24\10\10\0\12\13\3\0\3\7\12\13"+
    "\44\7\122\0\3\10\1\0\25\10\4\7\1\10\4\7\1\10\15\0"+
    "\300\7\47\10\25\0\4\10\u0116\7\2\0\6\7\2\0\46\7\2\0"+
    "\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0"+
    "\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0\3\7\1\0"+
    "\7\7\16\0\5\10\32\0\5\10\20\0\2\7\23\0\1\7\13\0"+
    "\5\10\5\0\6\10\1\0\1\7\15\0\1\7\20\0\15\7\3\0"+
    "\32\7\26\0\15\10\4\0\1\10\3\0\14\10\21\0\1\7\4\0"+
    "\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0"+
    "\5\7\4\0\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0"+
    "\205\7\6\0\4\7\3\10\16\0\46\7\12\0\66\7\11\0\1\7"+
    "\17\0\1\10\27\7\11\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\40\10\57\0\1\7\u01d5\0\3\7\31\0\11\7\6\10\1\0\5\7"+
    "\2\0\5\7\4\0\126\7\2\0\2\10\2\0\3\7\1\0\132\7"+
    "\1\0\4\7\5\0\51\7\3\0\136\7\21\0\33\7\65\0\20\7"+
    "\u0200\0\u19b6\7\112\0\u51cc\7\64\0\u048d\7\103\0\56\7\2\0\u010d\7"+
    "\3\0\20\7\12\13\2\7\24\0\57\7\1\10\14\0\2\10\1\0"+
    "\31\7\10\0\120\7\2\10\45\0\11\7\2\0\147\7\2\0\4\7"+
    "\1\0\2\7\16\0\12\7\120\0\10\7\1\10\3\7\1\10\4\7"+
    "\1\10\27\7\5\10\20\0\1\7\7\0\64\7\14\0\2\10\62\7"+
    "\21\10\13\0\12\13\6\0\22\10\6\7\3\0\1\7\4\0\12\13"+
    "\34\7\10\10\2\0\27\7\15\10\14\0\35\7\3\0\4\10\57\7"+
    "\16\10\16\0\1\7\12\13\46\0\51\7\16\10\11\0\3\7\1\10"+
    "\10\7\2\10\2\0\12\13\6\0\27\7\3\0\1\7\1\10\4\0"+
    "\60\7\1\10\1\7\3\10\2\7\2\10\5\7\2\10\1\7\1\10"+
    "\1\7\30\0\3\7\43\0\6\7\2\0\6\7\2\0\6\7\11\0"+
    "\7\7\1\0\7\7\221\0\43\7\10\10\1\0\2\10\2\0\12\13"+
    "\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u012e\7\2\0\76\7"+
    "\2\0\152\7\46\0\7\7\14\0\5\7\5\0\1\7\1\10\12\7"+
    "\1\0\15\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7"+
    "\3\0\20\10\20\0\7\10\14\0\2\7\30\0\3\7\31\0\1\7"+
    "\6\0\5\7\1\0\207\7\2\0\1\10\4\0\1\7\13\0\12\13"+
    "\7\0\32\7\4\0\1\7\1\0\32\7\13\0\131\7\3\0\6\7"+
    "\2\0\6\7\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7"+
    "\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\2\1\1\4\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\0\1\3"+
    "\2\0\1\23\3\0\1\4\1\22\1\0\1\24\1\0"+
    "\1\22\2\0\1\24\4\0\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[46];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\41\0\41\0\41\0\41\0\41\0\41"+
    "\0\41\0\41\0\41\0\41\0\41\0\41\0\u014a\0\u016b"+
    "\0\204\0\41\0\306\0\u018c\0\41\0\u0129\0\u01ad\0\u01ce"+
    "\0\u01ef\0\u0210\0\u0231\0\u0252\0\u0273\0\41\0\u0294\0\u02b5"+
    "\0\u0273\0\u02d6\0\u02f7\0\u0318\0\u0339\0\306";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[46];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\2\1\5\1\6\2\2\1\6"+
    "\2\2\1\6\1\7\1\10\1\11\1\12\1\2\1\6"+
    "\1\2\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\42\0\3\3\41\0"+
    "\1\27\1\30\33\0\6\31\1\32\32\31\7\0\2\6"+
    "\1\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\15\0\1\33\2\0\11\33\1\34\1\33\1\35\22\33"+
    "\20\0\1\11\1\36\41\0\1\37\1\40\30\0\1\41"+
    "\4\0\2\41\17\0\2\27\1\0\36\27\5\30\1\42"+
    "\33\30\15\33\1\43\23\33\13\0\1\44\4\0\2\44"+
    "\36\0\1\45\4\0\1\45\27\0\1\41\4\0\2\41"+
    "\1\37\1\40\15\0\4\30\1\46\1\42\33\30\1\33"+
    "\2\0\3\33\1\47\2\33\3\47\1\50\1\33\1\35"+
    "\1\33\2\47\1\33\1\47\5\33\2\47\6\33\13\0"+
    "\1\44\4\0\2\44\1\0\1\40\30\0\1\51\4\0"+
    "\2\51\17\0\1\33\2\0\3\33\1\52\2\33\3\52"+
    "\1\53\1\33\1\35\1\33\2\52\1\33\1\52\5\33"+
    "\2\52\14\33\1\52\2\33\4\52\1\43\2\33\2\52"+
    "\1\33\1\52\5\33\2\52\7\33\2\0\3\33\1\54"+
    "\2\33\3\54\1\34\1\33\1\35\1\33\2\54\1\33"+
    "\1\54\5\33\2\54\14\33\1\54\2\33\4\54\1\43"+
    "\2\33\2\54\1\33\1\54\5\33\2\54\7\33\2\0"+
    "\11\33\1\55\1\33\1\35\36\33\1\55\1\43\1\56"+
    "\22\33";

  private static int [] zzUnpackTrans() {
    int [] result = new int[858];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\14\11\2\1\1\0\1\11\2\0"+
    "\1\11\3\0\2\1\1\0\1\1\1\0\1\11\2\0"+
    "\1\1\4\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[46];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _AvroIdlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AvroIdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return LEFT_ANGLE;
          }
        case 21: break;
        case 14: 
          { return COMMA;
          }
        case 22: break;
        case 17: 
          { return LINE_COMMENT;
          }
        case 23: break;
        case 7: 
          { return LEFT_PAREN;
          }
        case 24: break;
        case 4: 
          { return INT_LITERAL;
          }
        case 25: break;
        case 3: 
          { return IDENTIFIER;
          }
        case 26: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 27: break;
        case 10: 
          { return RIGHT_BRACKET;
          }
        case 28: break;
        case 8: 
          { return RIGHT_PAREN;
          }
        case 29: break;
        case 6: 
          { return RIGHT_BRACE;
          }
        case 30: break;
        case 16: 
          { return EQUALS;
          }
        case 31: break;
        case 19: 
          { return STRING_LITERAL;
          }
        case 32: break;
        case 18: 
          { return BLOCK_COMMENT;
          }
        case 33: break;
        case 13: 
          { return AT;
          }
        case 34: break;
        case 20: 
          { return FLOAT_LITERAL;
          }
        case 35: break;
        case 15: 
          { return SEMICOLON;
          }
        case 36: break;
        case 9: 
          { return LEFT_BRACKET;
          }
        case 37: break;
        case 12: 
          { return RIGHT_ANGLE;
          }
        case 38: break;
        case 5: 
          { return LEFT_BRACE;
          }
        case 39: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 40: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
