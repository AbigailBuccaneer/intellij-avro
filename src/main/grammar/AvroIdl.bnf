{
    parserClass = "claims.bold.intellij.avro.idl.parser.AvroIdlParser"
    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "AvroIdl"
    psiImplClassSuffix = "Impl"
    psiPackage = "claims.bold.intellij.avro.idl.psi"
    psiImplPackage = "claims.bold.intellij.avro.idl.psi.impl"
    psiImplUtilClass = "claims.bold.intellij.avro.idl.psi.AvroIdlPsiUtil"

    elementTypeHolderClass = "claims.bold.intellij.avro.idl.psi.AvroIdlTypes"
    elementTypeClass = "claims.bold.intellij.avro.idl.psi.AvroIdlElementType"
    tokenTypeClass = "claims.bold.intellij.avro.idl.psi.AvroIdlTokenType"

    tokens=[
        INT_LITERAL="regexp:-?(0|[1-9][:digit:]*)"
        FLOAT_LITERAL="regexp:-?(NaN|Infinity|({DECIMAL_FLOATING_POINT_LITERAL}))"
        DECIMAL_FLOATING_POINT_LITERAL="regexp:{INT_LITERAL}(\.[:digit:]+)?([eE][+-]?[:digit:]+)?"
        STRING_LITERAL="regexp:\"([^\"]|\\\")*\""
        LINE_COMMENT="regexp://.*"
        DOC_COMMENT="regexp:/\*\*([^*]|\*+[^/*])*\*+/"
        BLOCK_COMMENT="regexp:/\*([^*]|\*+[^/*])*\*+/"

        LEFT_BRACE='{'
        RIGHT_BRACE='}'
        LEFT_PAREN='('
        RIGHT_PAREN=')'
        LEFT_BRACKET='['
        RIGHT_BRACKET=']'
        LEFT_ANGLE='<'
        RIGHT_ANGLE='>'
        AT='@'
        COMMA=','
        SEMICOLON=';'
        COLON=':'
        EQUALS='='

        ARRAY='array'
        BOOLEAN='boolean'
        DOUBLE='double'
        ENUM='enum'
        ERROR='error'
        FALSE='false'
        FIXED='fixed'
        FLOAT='float'
        IDL='idl'
        IMPORT='import'
        INT='int'
        LONG='long'
        MAP='map'
        ONEWAY='oneway'
        BYTES='bytes'
        SCHEMA='schema'
        STRING='string'
        NULL='null'
        PROTOCOL='protocol'
        RECORD='record'
        THROWS='throws'
        TRUE='true'
        UNION='union'
        VOID='void'
        DATE='date'
        TIME='time_ms'
        TIMESTAMP='timestamp_ms'
        DECIMAL='decimal'

        IDENTIFIER="regexp:(`[^`]*`)|[:jletter:][[:jletterdigit:]\.-]*"
    ]

    generateTokens=true

    extends(".*_decl") = declaration
    extends(".*_type") = type
    implements("protocol_def|enum_decl|fixed_decl|message_decl|declarator|enum_value|record_decl") = "com.intellij.psi.PsiNameIdentifierOwner"
    methods("protocol_def|enum_decl|fixed_decl|message_decl|declarator|enum_value|record_decl") = [getNameIdentifier getName setName]
}

file ::= protocol_def*

protocol_def ::= annotation* 'protocol' IDENTIFIER '{' declaration* '}' { pin = 2 }

annotation ::= '@' IDENTIFIER '(' json_value ')' { pin = 1 }

declaration ::= import_decl | record_decl | enum_decl | fixed_decl | message_decl

import_decl ::= annotation* 'import' import_type STRING_LITERAL ';' { pin = 2 }
import_type ::= 'idl' | 'protocol' | 'schema'
record_decl ::= annotation* record_type IDENTIFIER '{' (declarator ';')* '}' { pin = 2 }
record_type ::= 'record' | 'error'

enum_decl ::= annotation* 'enum' IDENTIFIER '{' enum_contents '}' { pin = 2 }
private enum_contents ::= [ enum_value (',' enum_value)* ]
enum_value ::= IDENTIFIER

fixed_decl ::= annotation* 'fixed' IDENTIFIER '(' INT_LITERAL ')' ';' { pin = 2 }

message_decl ::= type IDENTIFIER '(' arguments ')' message_attributes* ';' { pin = 3 }
private message_attributes ::= ( 'throws' IDENTIFIER (',' IDENTIFIER)* ) | 'oneway' { pin = 1}
private arguments ::= [ declarator (',' declarator)* ]

declarator ::= type annotation* IDENTIFIER [ '=' json_value ] { pin = 1 }

type ::= annotation* (array_type | map_type | union_type | primitive_type | IDENTIFIER)
primitive_type ::= 'boolean' | 'bytes' | 'int' | 'string' | 'float' | 'double' | 'long' | 'null'| 'date' | 'time_ms' | 'timestamp_ms' | decimal_type | 'void'
private angle_type ::= '<' type '>' { pin = 1 }
array_type ::= 'array' angle_type { pin = 1 }
decimal_type ::= 'decimal' '(' INT_LITERAL ',' INT_LITERAL ')' { pin = 1 }
map_type ::= 'map' angle_type { pin = 1 }
union_type ::= 'union' '{' union_contents '}' { pin = 1 }
private union_contents ::= [ type (',' type)* ]

json_value ::= json_object | json_array | STRING_LITERAL | INT_LITERAL | FLOAT_LITERAL | 'true' | 'false' | 'null'
json_object ::= '{' [ json_object_entry (',' json_object_entry)* ] '}'
json_object_entry ::= STRING_LITERAL ':' json_value
json_array ::= '[' [ json_value (',' json_value)* ] ']'
